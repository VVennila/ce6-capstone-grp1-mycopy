name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - stage
      - prod

jobs:
  deploy:
    name: Deploy to ${{ github.ref_name }}
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install

    - name: Run tests
      run: npm test

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}  # Use secret for repository name
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.ref_name }}:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.ref_name }}:$IMAGE_TAG

    - name: Download ECS task definition
      run: |
        aws ecs describe-task-definition --task-definition my-app-${{ github.ref_name }} --query taskDefinition > task-definition.json

    - name: Update ECS task definition with new image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ven-ecs-container
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy updated task definition to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: my-app-service-${{ github.ref_name }}
        cluster: ${{ secrets.ECS_CLUSTER }}  # Use secret for cluster name
        wait-for-service-stability: true
